require 'test/unit'
require './my_calRF.rb'
require './CalYear.rb'

class UnitTestRubyCal < Test::Unit::TestCase

  def test_1_year_greater_than_3000_returns_error
    assert_raise ArgumentError do
    Calendar.new(2, 3001)
   end
  end

  def test_2_error_if_year_argument_is_before_1800
    assert_raise ArgumentError do
    Calendar.new(2, 1799)
    end
  end

  def test_3_month_greater_than_12_returns_error
    assert_raise ArgumentError do
    Calendar.new(2, 3001)
   end
  end

  def test_4_passing_only_year_arg_works
    assert_nothing_raised do
      cal = Year.new(2012)
    end
  end

  def test_6_year_header_print_out
    cal=Year.new(2004)
    header="                             2004\n\n"
    assert_equal(header, cal.create_year_header)
  end

  def test_6A_weekdays_print_3_across
    cal=Year.new(2004)
    day_row = "Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa  Su Mo Tu We Th Fr Sa\n"
    assert_equal(day_row, cal.weekdays_rows)
  end

  def test_7_weeks_blocks_populate_year_array
    cal=Year.new(2000)
    weeks =
    [[["  ", "  ", "  ", "  ", "  ", "  ", " 1"],
  [" 2", " 3", " 4", " 5", " 6", " 7", " 8"],
  [" 9", "10", "11", "12", "13", "14", "15"],
  ["16", "17", "18", "19", "20", "21", "22"],
  ["23", "24", "25", "26", "27", "28", "29"],
  ["30", "31", "  ", "  ", "  ", "  ", "  "]],
 [["  ", "  ", " 1", " 2", " 3", " 4", " 5"],
  [" 6", " 7", " 8", " 9", "10", "11", "12"],
  ["13", "14", "15", "16", "17", "18", "19"],
  ["20", "21", "22", "23", "24", "25", "26"],
  ["27", "28", "29", "  ", "  ", "  ", "  "],
  ["  ", "  ", "  ", "  ", "  ", "  ", "  "]],
 [["  ", "  ", "  ", " 1", " 2", " 3", " 4"],
  [" 5", " 6", " 7", " 8", " 9", "10", "11"],
  ["12", "13", "14", "15", "16", "17", "18"],
  ["19", "20", "21", "22", "23", "24", "25"],
  ["26", "27", "28", "29", "30", "31", "  "],
  ["  ", "  ", "  ", "  ", "  ", "  ", "  "]],
 [["  ", "  ", "  ", "  ", "  ", "  ", " 1"],
  [" 2", " 3", " 4", " 5", " 6", " 7", " 8"],
  [" 9", "10", "11", "12", "13", "14", "15"],
  ["16", "17", "18", "19", "20", "21", "22"],
  ["23", "24", "25", "26", "27", "28", "29"],
  ["30", "  ", "  ", "  ", "  ", "  ", "  "]],
 [["  ", " 1", " 2", " 3", " 4", " 5", " 6"],
  [" 7", " 8", " 9", "10", "11", "12", "13"],
  ["14", "15", "16", "17", "18", "19", "20"],
  ["21", "22", "23", "24", "25", "26", "27"],
  ["28", "29", "30", "31", "  ", "  ", "  "],
  ["  ", "  ", "  ", "  ", "  ", "  ", "  "]],
 [["  ", "  ", "  ", "  ", " 1", " 2", " 3"],
  [" 4", " 5", " 6", " 7", " 8", " 9", "10"],
  ["11", "12", "13", "14", "15", "16", "17"],
  ["18", "19", "20", "21", "22", "23", "24"],
  ["25", "26", "27", "28", "29", "30", "  "],
  ["  ", "  ", "  ", "  ", "  ", "  ", "  "]],
 [[" 1", " 2", " 3", " 4", " 5", " 6", " 7"],
  [" 8", " 9", "10", "11", "12", "13", "14"],
  ["15", "16", "17", "18", "19", "20", "21"],
  ["22", "23", "24", "25", "26", "27", "28"],
  ["29", "30", "31", "  ", "  ", "  ", "  "],
  ["  ", "  ", "  ", "  ", "  ", "  ", "  "]],
 [["  ", "  ", " 1", " 2", " 3", " 4", " 5"],
  [" 6", " 7", " 8", " 9", "10", "11", "12"],
  ["13", "14", "15", "16", "17", "18", "19"],
  ["20", "21", "22", "23", "24", "25", "26"],
  ["27", "28", "29", "30", "31", "  ", "  "],
  ["  ", "  ", "  ", "  ", "  ", "  ", "  "]],
 [["  ", "  ", "  ", "  ", "  ", " 1", " 2"],
  [" 3", " 4", " 5", " 6", " 7", " 8", " 9"],
  ["10", "11", "12", "13", "14", "15", "16"],
  ["17", "18", "19", "20", "21", "22", "23"],
  ["24", "25", "26", "27", "28", "29", "30"],
  ["  ", "  ", "  ", "  ", "  ", "  ", "  "]],
 [[" 1", " 2", " 3", " 4", " 5", " 6", " 7"],
  [" 8", " 9", "10", "11", "12", "13", "14"],
  ["15", "16", "17", "18", "19", "20", "21"],
  ["22", "23", "24", "25", "26", "27", "28"],
  ["29", "30", "31", "  ", "  ", "  ", "  "],
  ["  ", "  ", "  ", "  ", "  ", "  ", "  "]],
 [["  ", "  ", "  ", " 1", " 2", " 3", " 4"],
  [" 5", " 6", " 7", " 8", " 9", "10", "11"],
  ["12", "13", "14", "15", "16", "17", "18"],
  ["19", "20", "21", "22", "23", "24", "25"],
  ["26", "27", "28", "29", "30", "  ", "  "],
  ["  ", "  ", "  ", "  ", "  ", "  ", "  "]],
 [["  ", "  ", "  ", "  ", "  ", "  ", " 1"],
  [" 2", " 3", " 4", " 5", " 6", " 7", " 8"],
  [" 9", "10", "11", "12", "13", "14", "15"],
  ["16", "17", "18", "19", "20", "21", "22"],
  ["23", "24", "25", "26", "27", "28", "29"],
  ["30", "31", "  ", "  ", "  ", "  ", "  "]]]
    assert_equal(weeks, cal.weeks_blocks)
  end

  def test_8_months_populate_month_rows
    cal=Year.new(2000)
    months = [["      January       ",
  "  ",
  "      February      ",
  "  ",
  "       March        ",
  "  "],
 ["       April        ",
  "  ",
  "        May         ",
  "  ",
  "        June        ",
  "  "],
 ["        July        ",
  "  ",
  "       August       ",
  "  ",
  "     September      ",
  "  "],
 ["      October       ",
  "  ",
  "      November      ",
  "  ",
  "      December      ",
  "  "]]
    assert_equal(months, cal.format_months_rows)
  end

end
